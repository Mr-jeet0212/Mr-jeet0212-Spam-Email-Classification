# -*- coding: utf-8 -*-
"""Spam Email Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uMN9fQebhhGyV1AX9Z8FpII_L_eeN_Sn

Install the ucimlrepo package and import the fetch_ucirepo
"""

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo

"""Fetch the spambase dataset using its ID (94) from the UCI Machine Learning Repository"""

spambase = fetch_ucirepo(id=94)

"""Extract the features (X) and targets (y) as pandas dataframes"""

X = spambase.data.features
y = spambase.data.targets

"""Print the metadata of the dataset"""

print(spambase.metadata)

"""Print the information about the variables (features) in the dataset"""

print(spambase.variables)

"""#Install necessary packages"""

pip install ucimlrepo pandas scikit-learn

"""Import the necessary libraries"""

from ucimlrepo import fetch_ucirepo
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

"""Create new feature by combining existing ones"""

X['word_freq_total'] = X.iloc[:, :48].sum(axis=1)
X['char_freq_total'] = X.iloc[:, 48:54].sum(axis=1)

"""Apply PCA to reduce dimensionality"""

from sklearn.decomposition import PCA
pca = PCA(n_components=10)
X_pca = pca.fit_transform(X)

"""Split the data into training and testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, random_state=42)

"""Standardize the features"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# Initialize the RandomForestClassifier"""

model = RandomForestClassifier(random_state=42)

# Train the model
model.fit(X_train_scaled, y_train)

"""Make predictions on the test set"""

y_pred = model.predict(X_test_scaled)

"""Calculate accuracy"""

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

"""Generate classification report"""

report = classification_report(y_test, y_pred)
print(f"Classification Report:\n{report}")